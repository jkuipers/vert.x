vert.x planning/ideas/TODO
==========================

Busmods suggestions
===================
AMQP
Redis
STOMP
JDBC
Memcached
Twitter
FB
Google+
Supervisors
Remote Actors
Web framework
JNDI
JMS
SCTP
PGM
ZeroMQ
Gemfire
Webmachine style

Issues/Ideas
============

1) Consider wrapping libev in Java API
2) Consider using disruptor https://code.google.com/p/disruptor/ as alternative to concurrent queues
3) StartTLS
7) HTTP server side 100-continue handling
8) HTTPClient should pool HTTP connections in same way as redis client, i.e. have HTTPPool and HTTPConnection class -
otherwise can't do proper pipelining since can't guarantee same connection.

For people who don't care about pipelining, then all the request methods should ALSO live on the pool - this is a
shortcut to writing .connection() and clos()ing each time

Websockets should also be obtained immediately from a call to websocket() on the HTTPPool class, this will return
a ClientWebsocket instance, which will try and connect() immediately. If anything is written before being connected
it will go into a pending list, like with HttpClientRequest

9) HTTP connection reconnection.
10) Look at Redis cluster support in client
12) Event bus should be paritioned into "application groups" for isolation.
13) DHT
14) Wire protocol so non JVM runtimes can join the event bus - provide event bus API in MRI ruby etc
(We could even define a wire format gossip protocol to distribute topology to non JVM members, they could then join the
network)
17) eventbus interop test between JS, Java and Ruby
18) json sending via JS can be optimised, by not converting to and from Java JsonObject, instead create new message type
which just encodes as string
19) core/json tests
20) Error reporting on deploy/undeploy etc from the command line is inconsistent
21) consider using sitebricks pop3 mail
22) better error checking on parameters in ruby and js core layer
23) Consider busmods (with dependencies) living in their own directory from "busmod" in the distro. Users can then install their own by copying busmod and deps
into dir. This will be available to all other verticles.
24) Redis busmod
25) AMQP busmod
26) CommonJS/AMD support
26) Consider using Errai JSON parser
27) Look at Arquillian for vert.x tests
28) busmods - need better way of installing them. adding all busmod dependencies to the main classpath is not good. We should probably install in them in their own dir with own
lib directory under the vert.x install
29) spdy support










